{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nomcg\\\\desktop\\\\thinkful\\\\ReactUnitProjects\\\\scrap-chef\\\\src\\\\components\\\\addingredient.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { addToKitchen } from '../actions';\nexport class AddingIngredient extends React.Component {\n  onSubmit(event) {\n    event.preventDefault();\n    let text = this.textInput.value.trim();\n    let run = this.props;\n    let blank = this.textInput;\n\n    if (this.props.ingredients.indexOf(text) === -1) {\n      run.dispatch(addTo(text));\n      blank.value = '';\n    } else {\n      document.getElementById('ingredient-input').value = 'No DUPLICATES in this kitchen!';\n      setTimeout(function () {\n        document.getElementById('ingredient-input').value = '';\n      }, 1500);\n    }\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"card add-form\",\n      onSubmit: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"ingredient-input\",\n      id: \"ingredient-input\",\n      maxLength: \"25\",\n      name: \"ingredient\",\n      placeholder: \"What else is in your kitchen?\",\n      autoComplete: \"off\",\n      ref: input => this.textInput = input,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      name: \"Add\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Add\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  options: state.options,\n  ingredients: state.ingredients\n});\n\nexport default connect(mapStateToProps)(AddingIngredient);","map":{"version":3,"sources":["C:\\Users\\nomcg\\desktop\\thinkful\\ReactUnitProjects\\scrap-chef\\src\\components\\addingredient.js"],"names":["React","connect","addToKitchen","AddingIngredient","Component","onSubmit","event","preventDefault","text","textInput","value","trim","run","props","blank","ingredients","indexOf","dispatch","addTo","document","getElementById","setTimeout","render","e","input","mapStateToProps","state","options"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,YAAT,QAA6B,YAA7B;AAEA,OAAO,MAAMC,gBAAN,SAA+BH,KAAK,CAACI,SAArC,CAA+C;AAEpDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACdA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIC,IAAI,GAAG,KAAKC,SAAL,CAAeC,KAAf,CAAqBC,IAArB,EAAX;AACA,QAAIC,GAAG,GAAG,KAAKC,KAAf;AACA,QAAIC,KAAK,GAAG,KAAKL,SAAjB;;AACA,QAAI,KAAKI,KAAL,CAAWE,WAAX,CAAuBC,OAAvB,CAA+BR,IAA/B,MAAyC,CAAC,CAA9C,EAAiD;AAC7CI,MAAAA,GAAG,CAACK,QAAJ,CAAaC,KAAK,CAACV,IAAD,CAAlB;AACAM,MAAAA,KAAK,CAACJ,KAAN,GAAc,EAAd;AACH,KAHD,MAIK;AACHS,MAAAA,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CV,KAA5C,GAAoD,gCAApD;AACAW,MAAAA,UAAU,CAAC,YAAU;AACnBF,QAAAA,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CV,KAA5C,GAAoD,EAApD;AAAwD,OADhD,EACkD,IADlD,CAAV;AAED;AACF;;AAEDY,EAAAA,MAAM,GAAG;AACP,WACE;AAAM,MAAA,SAAS,EAAC,eAAhB;AAAgC,MAAA,QAAQ,EAAGC,CAAD,IAAO,KAAKlB,QAAL,CAAckB,CAAd,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACM,MAAA,IAAI,EAAC,MADX;AAEM,MAAA,SAAS,EAAC,kBAFhB;AAGM,MAAA,EAAE,EAAC,kBAHT;AAIM,MAAA,SAAS,EAAC,IAJhB;AAKM,MAAA,IAAI,EAAC,YALX;AAMM,MAAA,WAAW,EAAC,+BANlB;AAOM,MAAA,YAAY,EAAC,KAPnB;AAQM,MAAA,GAAG,EAAEC,KAAK,IAAI,KAAKf,SAAL,GAAiBe,KARrC;AASM,MAAA,QAAQ,MATd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAYI;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,IAAI,EAAC,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAZJ,CADF;AAqBD;;AAxCmD;;AA2CtD,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAChCC,EAAAA,OAAO,EAAED,KAAK,CAACC,OADiB;AAEhCZ,EAAAA,WAAW,EAAEW,KAAK,CAACX;AAFa,CAAL,CAA7B;;AAKA,eAAed,OAAO,CAAEwB,eAAF,CAAP,CAA0BtB,gBAA1B,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { addToKitchen } from '../actions';\r\n\r\nexport class AddingIngredient extends React.Component {\r\n\r\n  onSubmit(event) {\r\n    event.preventDefault();\r\n    let text = this.textInput.value.trim()\r\n    let run = this.props\r\n    let blank = this.textInput\r\n    if (this.props.ingredients.indexOf(text) === -1 ){\r\n        run.dispatch(addTo(text))\r\n        blank.value = ''\r\n    }\r\n    else {\r\n      document.getElementById('ingredient-input').value = 'No DUPLICATES in this kitchen!'\r\n      setTimeout(function(){ \r\n        document.getElementById('ingredient-input').value = '' }, 1500)\r\n    }\r\n  }\r\n\r\n  render (){\r\n    return (\r\n      <form className=\"card add-form\" onSubmit={(e) => this.onSubmit(e)}>\r\n        <input \r\n              type=\"text\" \r\n              className=\"ingredient-input\" \r\n              id=\"ingredient-input\"\r\n              maxLength=\"25\" \r\n              name=\"ingredient\" \r\n              placeholder=\"What else is in your kitchen?\"\r\n              autoComplete=\"off\"\r\n              ref={input => this.textInput = input}\r\n              required\r\n          />\r\n          <button \r\n              type=\"submit\" \r\n              name=\"Add\"\r\n          >\r\n              Add\r\n          </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  options: state.options,\r\n  ingredients: state.ingredients\r\n});\r\n\r\nexport default connect (mapStateToProps)(AddingIngredient);\r\n"]},"metadata":{},"sourceType":"module"}